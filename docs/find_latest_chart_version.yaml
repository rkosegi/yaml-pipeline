#  Copyright 2025 Richard Kosegi
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---
# This pipeline will find latest version of Helm chart from repository index.
# You can narrow-down version matching with regular expression
vars:
  helmIndex: https://grafana.github.io/helm-charts/index.yaml
  chart: grafana
  versionPattern: (?P<version>8\.\d+\.\d+)
steps:
  # Download index.yaml from Helm repository if it doesn't exist locally
  100-download-index-if-not-exists-locally:
    order: 100
    exec:
      program: curl
      args:
        - -sSLf
        - '{{ .vars.helmIndex }}'
        - -o
        - .private/helm_index.yaml
      stderr: .private/100-curl-stderr.txt
      stdout: .private/100-curl-stdout.txt
    when: |
      {{ not (fileExists ".private/helm_index.yaml") }}
  # Load index.yaml into data tree
  200-load-index:
    order: 200
    import:
      file: .private/helm_index.yaml
      path: input
      mode: yaml
  # Extracts first matching entry of given chart
  300-extract:
    order: 300
    template:
      template: |
        {{- $entries := index .input.entries .vars.chart }}
        {{- range $entries -}}
        {{- $found := regexNamedExtract $.vars.versionPattern .version -}}
        {{-   if len $found }}
        {{-     index $found "version" }}
        {{-     break }}
        {{-   end }}
        {{- end }}
      path: output
      parseAs: yaml
      trim: true
  # Print output
  400-print-result:
    order: 400
    log:
      message: Latest version of {{ .vars.chart }} is {{ .output }}
  # Just dump data to file for eventual debugging
  999-dump:
    order: 999
    export:
      file: .private/out.yaml
      format: yaml
    when: |
      {{ eq .vars.debug "true" }}
